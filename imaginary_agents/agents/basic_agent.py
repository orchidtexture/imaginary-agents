from typing import List, Any
from pydantic import Field
from atomic_agents.lib.base.base_io_schema import BaseIOSchema
from atomic_agents.lib.components.system_prompt_generator import (
    SystemPromptGenerator
)
from atomic_agents.agents.base_agent import (
    BaseAgent,
    BaseAgentConfig
)


########################
# INPUT/OUTPUT SCHEMAS #
########################


class FinalAnswerSchema(BaseIOSchema):
    """Schema for the final answer generated by the Basic Agent."""

    final_answer: str = Field(
        ...,
        description="The final answer generated based on the tool output and user query."
    )


class BasicAgent(BaseAgent):
    """
        An Agent that receives a user's input and produces an output.
    """

    def __init__(
        self,
        client: Any,
        llm_model: str,
        background: List[str],
        output_instructions: List[str],
        steps: List[str],
        input_schema: BaseIOSchema,
        output_schema: BaseIOSchema
    ):
        """
        Initialize the BasicAgent.

        Args:
            config (BaseAgentConfig): Configuration for the agent.
        """

        if output_schema is None:
            output_schema = FinalAnswerSchema

        system_prompt_generator = SystemPromptGenerator(
            background=background,
            steps=steps,
            output_instructions=output_instructions
        )
        config = BaseAgentConfig(
            client=client,
            model=llm_model,
            system_prompt_generator=system_prompt_generator,
            input_schema=input_schema,
            output_schema=output_schema
        )

        # Setup agent configuration
        super().__init__(config)
